"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findAssetsByPath = exports.getQueryParams = exports.determineRemoteUrl = exports.isRemoteUrl = void 0;
const node_path_1 = __importDefault(require("node:path"));
const glob_1 = require("glob");
/**
 * isRemoteUrl
 */
function isRemoteUrl(url) {
    return url.startsWith('http');
}
exports.isRemoteUrl = isRemoteUrl;
/**
 * determineRemoteUrl
 */
function determineRemoteUrl(url, host) {
    if (isRemoteUrl(url))
        return url;
    if (!url.startsWith('/')) {
        url = `/${url}`;
    }
    url = `${host}${url}`;
    return url;
}
exports.determineRemoteUrl = determineRemoteUrl;
/**
 * getQueryParams
 */
function getQueryParams(url) {
    if (typeof url !== 'string') {
        throw new Error('Can not getQueryParams. Invalid URL');
    }
    const params = {};
    const urlSegments = url.split('?');
    urlSegments[1] &&
        urlSegments[1].split('&').forEach(segment => {
            const [key, value] = segment.split('=');
            //@ts-expect-error TS can't check if key is in effect key of params
            params[key] = value;
        });
    return params;
}
exports.getQueryParams = getQueryParams;
function findAssetsByPath(options) {
    if (!Array.isArray(options.path)) {
        options.path = [options.path];
    }
    return options.path.flatMap(assetsPath => {
        const assetsDirectory = glob_1.glob.sync(node_path_1.default.join(options.baseDir, assetsPath, '/**/*'));
        return assetsDirectory.filter(file => !!node_path_1.default.extname(file));
    });
}
exports.findAssetsByPath = findAssetsByPath;
