import { Region as Region$1, AbtestingClient } from '@algolia/client-abtesting';
export * from '@algolia/client-abtesting';
export { Region as AbTestingRegion } from '@algolia/client-abtesting';
import { Region as Region$2, AnalyticsClient } from '@algolia/client-analytics';
export * from '@algolia/client-analytics';
export { Region as AnalyticsRegion } from '@algolia/client-analytics';
import { ClientOptions } from '@algolia/client-common';
import { Region as Region$3, PersonalizationClient } from '@algolia/client-personalization';
export * from '@algolia/client-personalization';
import { SearchClient } from '@algolia/client-search';
export * from '@algolia/client-search';
export { AdvancedSyntaxFeatures, AlternativesAsExact, Anchoring, AroundPrecision, AroundRadius, AroundRadiusAll, AutomaticFacetFilter, AutomaticFacetFilters, Banner, BannerImage, BannerImageUrl, BannerLink, Banners, BaseIndexSettings, BaseSearchParams, BaseSearchParamsWithoutQuery, BaseSearchResponse, BooleanString, Condition, Consequence, ConsequenceHide, ConsequenceParams, ConsequenceQuery, ConsequenceQueryObject, CustomDeleteProps, CustomGetProps, CustomPostProps, CustomPutProps, DeletedAtResponse, Distinct, Edit, EditType, ErrorBase, ExactOnSingleWordQuery, Exhaustive, FacetFilters, FacetOrdering, FacetStats, Facets, HighlightResult, HighlightResultOption, IgnorePlurals, IndexSettingsAsSearchParams, MatchLevel, MatchedGeoLocation, Mode, NumericFilters, OptionalFilters, Params, Personalization, Promote, PromoteObjectID, PromoteObjectIDs, QueryType, Range, RankingInfo, ReRankingApplyFilter, Redirect, RedirectRuleIndexData, RedirectRuleIndexMetadata, RedirectURL, RemoveStopWords, RemoveWordsIfNoResults, RenderingContent, SearchPagination, SearchParams, SearchParamsObject, SearchParamsQuery, SemanticSearch, SnippetResult, SnippetResultOption, SortRemainingBy, SupportedLanguage, TagFilters, TaskStatus, TimeRange, TypoTolerance, TypoToleranceEnum, Value, Widgets, apiClientVersion } from '@algolia/client-search';
import { RecommendClient } from '@algolia/recommend';
export * from '@algolia/recommend';

type Region = Region$1 | Region$2;

/**
 * Options forwarded to the client initialized via the `init` method.
 */
type InitClientOptions = Partial<{
    /**
     * App to target with the initialized client, defaults to the `algoliasearch` appId.
     */
    appId: string;
    /**
     * API key of the targeted app ID, defaults to the `algoliasearch` apiKey.
     */
    apiKey: string;
    options: ClientOptions;
}>;
type InitClientRegion<TRegion> = Partial<{
    /**
     * Available regions of the initialized client.
     */
    region: TRegion;
}>;

type Algoliasearch = SearchClient & {
    initRecommend: (initOptions?: InitClientOptions) => RecommendClient;
    initAnalytics: (initOptions?: InitClientOptions & InitClientRegion<Region$2>) => AnalyticsClient;
    initAbtesting: (initOptions?: InitClientOptions & InitClientRegion<Region$1>) => AbtestingClient;
    initPersonalization: (initOptions: InitClientOptions & Required<InitClientRegion<Region$3>>) => PersonalizationClient;
};
declare function algoliasearch(appId: string, apiKey: string, options?: ClientOptions): Algoliasearch;

export { type Algoliasearch, type InitClientOptions, type InitClientRegion, type Region, algoliasearch };
